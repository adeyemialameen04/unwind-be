// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book.sql

package repository

import (
	"context"
)

const findAllBooks = `-- name: FindAllBooks :many
SELECT id, title, author, created_at, updated_at FROM book
`

func (q *Queries) FindAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, findAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBook = `-- name: InsertBook :one
INSERT INTO book (id, title, author)
VALUES ( uuid_generate_v4(), $1, $2 )
RETURNING id, title, author, created_at, updated_at
`

type InsertBookParams struct {
	Title  string `binding:"required" json:"title"`
	Author string `binding:"required" json:"author"`
}

func (q *Queries) InsertBook(ctx context.Context, arg InsertBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, insertBook, arg.Title, arg.Author)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
