// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package repository

import (
	"context"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, username, email, password, profile_pic, created_at, updated_at FROM "user"
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO "user" (
 id, email, password 
) VALUES ( uuid_generate_v4(), $1, $2 )
RETURNING id, name, username, email, password, profile_pic, created_at, updated_at
`

type RegisterUserParams struct {
	Email    string `binding:"required,email" json:"email"`
	Password string `binding:"required" json:"password"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.db.QueryRow(ctx, registerUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
