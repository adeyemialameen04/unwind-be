// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: watch-list.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addToList = `-- name: AddToList :one
INSERT INTO watch_list (
  id, anilist_id, hianime_id, user_id
) VALUES ( uuid_generate_v4(), $1, $2, $3 )
RETURNING id, user_id, anilist_id, hianime_id, created_at, updated_at
`

type AddToListParams struct {
	AnilistID *string   `binding:"required" json:"anilistId"`
	HianimeID *string   `binding:"required" json:"hianimeId"`
	UserID    uuid.UUID `json:"userId"`
}

func (q *Queries) AddToList(ctx context.Context, arg AddToListParams) (*WatchList, error) {
	row := q.db.QueryRow(ctx, addToList, arg.AnilistID, arg.HianimeID, arg.UserID)
	var i WatchList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AnilistID,
		&i.HianimeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserWatchList = `-- name: GetUserWatchList :many
SELECT id, user_id, anilist_id, hianime_id, created_at, updated_at FROM watch_list
WHERE user_id = $1
`

func (q *Queries) GetUserWatchList(ctx context.Context, userID uuid.UUID) ([]*WatchList, error) {
	rows, err := q.db.Query(ctx, getUserWatchList, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WatchList
	for rows.Next() {
		var i WatchList
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AnilistID,
			&i.HianimeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
